<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nivelle.bigdata.clickhouse.mapper.UserTransactionInfoMapper">
    <resultMap id="BaseResultMap" type="com.nivelle.bigdata.clickhouse.entity.UserTransactionInfo">
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="book_id" jdbcType="INTEGER" property="bookId"/>
        <result column="book_name" jdbcType="INTEGER" property="bookName"/>
        <result column="chapter_id" jdbcType="VARCHAR" property="chapterId"/>
        <result column="book_type" jdbcType="INTEGER" property="bookType"/>
        <result column="category_id1" jdbcType="INTEGER" property="categoryId1"/>
        <result column="category_id2" jdbcType="INTEGER" property="categoryId2"/>
        <result column="category_id3" jdbcType="INTEGER" property="categoryId3"/>
        <result column="category_id4" jdbcType="INTEGER" property="categoryId4"/>
        <result column="p2" jdbcType="VARCHAR" property="p2"/>
        <result column="p16" jdbcType="VARCHAR" property="p16"/>
        <result column="copyright_id" jdbcType="INTEGER" property="copyrightId"/>
        <result column="company_id" jdbcType="VARCHAR" property="companyId"/>
        <result column="origin" jdbcType="VARCHAR" property="origin"/>
        <result column="coupon_amount" jdbcType="DECIMAL" property="couponAmount"/>
        <result column="apple_gift_amount" jdbcType="DECIMAL" property="appleGiftAmount"/>
        <result column="apple_amount" jdbcType="DECIMAL" property="appleAmount"/>
        <result column="refund_amount" jdbcType="DECIMAL" property="refundAmount"/>
        <result column="main_gift_amount" jdbcType="DECIMAL" property="mainGiftAmount"/>
        <result column="main_amount" jdbcType="DECIMAL" property="mainAmount"/>
        <result column="amount" jdbcType="DECIMAL" property="amount"/>

        <result column="create_time" jdbcType="DATE" property="createTime"/>
    </resultMap>

    <sql id="Base_Column_List">
        user_name
        ,book_id,book_name,chapter_id,book_type,category_id1,category_id2,category_id3,category_id4,p2,p16,copyright_id,company_id,origin,coupon_amount,apple_gift_amount,
apple_amount,refund_amount,main_gift_amount,main_amount,amount,create_time
    </sql>
    <insert id="batchSave" parameterType="com.nivelle.bigdata.clickhouse.entity.UserTransactionInfo">
        INSERT INTO nd_user_transaction_info
        (user_name,book_id,book_name,chapter_id,book_type,category_id1,category_id2,category_id3,category_id4,category_name,p2,p16,copyright_id,company_id,origin,coupon_amount,apple_gift_amount,
        apple_amount,refund_amount,main_gift_amount,main_amount,amount,create_time)
        VALUES
        <foreach collection="userTransactionInfoList" item="item" index="index" separator=",">
            (#{item.userName},#{item.bookId},#{item.bookName},#{item.chapterId},
            #{item.bookType},#{item.categoryId1},#{item.categoryId2},#{item.categoryId3},#{item.categoryId4},#{item.categoryName},
            #{item.p2},#{item.p16},#{item.copyrightId},#{item.companyId},#{item.origin},#{item.couponAmount},#{item.appleGiftAmount},#{item.appleAmount}
            ,#{item.refundAmount},#{item.mainGiftAmount},#{item.mainAmount},#{item.amount},#{item.createTime})
        </foreach>
    </insert>
    <insert id="save" parameterType="com.nivelle.bigdata.clickhouse.entity.UserTransactionInfo">
        INSERT INTO nd_user_transaction_info
        (user_name, book_id, book_name, chapter_id, book_type, category_id1, category_id2, category_id3, category_id4,
         p2, p16, copyright_id, company_id, origin, coupon_amount, apple_gift_amount, apple_amount, refund_amount,
         main_gift_amount, main_amount, amount, create_time)
        VALUES (#{userName}, #{bookId}, #{bookName}, #{chapterId}, #{bookType}, #{categoryId1}, #{categoryId2},
                #{categoryId3}, #{categoryId4}, #{p2}, #{p16}, #{copyrightId}, #{companyId}, #{origin}, #{couponAmount},
                #{appleGiftAmount}, #{appleAmount}, #{refundAmount}, #{mainGiftAmount}, #{mainAmount}, #{amount},
                #{createTime})
    </insert>
    <select id="selectList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from nd_user_transaction_info
    </select>


    <select id="getCondition" parameterType="java.util.Map" resultType="com.nivelle.bigdata.clickhouse.params.UserTransactionInfoResponse">
        select count(*) as payPersons,
        book_id as bookId, sum(amount) as payAmount,sum (apple_amount+main_amount) as payRechargeAmount,sum
        (apple_gift_amount+main_gift_amount) as payCouponAmount, sum (refund_amount) as payRefundAmount
        from nd_user_transaction_info
        <where>
            create_time between #{startTime} and #{endTime}
            <if test="categoryIds!=null and categoryIds.size()>0">
                and (category_id1 in
                <foreach collection="categoryIds" item="categoryId" index="index"
                         open="(" close=")" separator=",">
                    #{categoryId}
                </foreach>
                or category_id2 in
                <foreach collection="categoryIds" item="categoryId" index="index"
                         open="(" close=")" separator=",">
                    #{categoryId}
                </foreach>
                or category_id3 in
                <foreach collection="categoryIds" item="categoryId" index="index"
                         open="(" close=")" separator=",">
                    #{categoryId}
                </foreach>
                or category_id4 in
                <foreach collection="categoryIds" item="categoryId" index="index"
                         open="(" close=")" separator=",">
                    #{categoryId}
                </foreach>
                )
            </if>
            <if test="bookIds!=null and bookIds.size()>0 ">
                and book_id in
                <foreach collection="bookIds" item="bookId" index="index"
                         open="(" close=")" separator=",">
                    #{bookId}
                </foreach>
            </if>
            <if test="copyrightIds!=null and copyrightIds.size()>0 ">
                and copyright_id in
                <foreach collection="copyrightIds" item="copyrightId" index="index"
                         open="(" close=")" separator=",">
                    #{copyrightId}
                </foreach>
            </if>
            <if test="channels!=null and channels.size()>0 ">
                and p2 in
                <foreach collection="channels" item="channel" index="index"
                         open="(" close=")" separator=",">
                    #{channel}
                </foreach>
            </if>
            group by book_id;
        </where>
    </select>
</mapper>
